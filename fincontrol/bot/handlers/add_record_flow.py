from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from asgiref.sync import sync_to_async
from django.utils import timezone
from datetime import datetime

from bot.keyboards.categories_kb import (
    get_categories,
    get_subcategories,
    categories_keyboard,
    subcategories_keyboard,
)
from bot.keyboards.main_kb import main_menu
from django.contrib.auth import get_user_model
from transactions.models import Transaction

User = get_user_model()
router = Router()

# ===== –•–µ–ª–ø–µ—Ä—ã =====
def back_btn(callback: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=callback)]]
    )

def fmt_confirm_text(data: dict) -> str:
    return (
        f"–¢–∏–ø: {data['type']}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category', '–û–±—â–∞—è')}\n"
        f"–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('subcategory', '‚Äî')}\n"
        f"–°—É–º–º–∞: {data['amount']}\n"
        f"–î–∞—Ç–∞: {data['date'].strftime('%d.%m.%Y')}"
    )

# ===== –°–æ—Å—Ç–æ—è–Ω–∏—è =====
class AddRecord(StatesGroup):
    type = State()
    category = State()
    subcategory = State()
    amount = State()
    date = State()
    confirm = State()

# ===== –°—Ç–∞—Ä—Ç =====
@router.callback_query(F.data == "add_record")
async def add_record_start(call: CallbackQuery, state: FSMContext):
    await state.clear()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∏ –†–∞—Å—Ö–æ–¥", callback_data="type_expense")],
        [InlineKeyboardButton(text="üí∞ –î–æ—Ö–æ–¥", callback_data="type_income")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
    ])
    await state.set_state(AddRecord.type)
    await call.message.edit_text("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∑–∞–ø–∏—Å–∏:", reply_markup=kb)

# ===== –í—ã–±–æ—Ä —Ç–∏–ø–∞ =====
@router.callback_query(AddRecord.type, F.data.startswith("type_"))
async def choose_type(call: CallbackQuery, state: FSMContext):
    record_type = call.data.split("_", 1)[1]
    await state.update_data(type=record_type)

    # –ï—Å–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è "type" ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    data = await state.get_data()
    if data.get("edit_field") == "type":
        await state.update_data(edit_field=None)
        await show_confirm(call.message, state)
        return

    cats = await get_categories()
    kb = categories_keyboard(cats, extra_buttons=[
        ("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip_category"),
        ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "add_record")
    ])
    await state.set_state(AddRecord.category)
    await call.message.edit_text("üìÇ –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)

# ===== –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ =====
@router.callback_query(AddRecord.category)
async def choose_category(call: CallbackQuery, state: FSMContext):
    if call.data == "skip_category":
        await state.update_data(category="–û–±—â–µ–µ")
        subs = await get_subcategories("–û–±—â–µ–µ")
        kb = subcategories_keyboard(subs, "–û–±—â–µ–µ", extra_buttons=[
            ("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip_subcategory"),
            ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_category")
        ])
        await state.set_state(AddRecord.subcategory)
        await call.message.edit_text("üìÇ –í—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏:", reply_markup=kb)
        return

    if call.data.startswith("category_"):
        cat_name = call.data.split("_", 1)[1]
        await state.update_data(category=cat_name)
        subs = await get_subcategories(cat_name)
        if subs:
            kb = subcategories_keyboard(subs, cat_name, extra_buttons=[
                ("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip_subcategory"),
                ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_category")
            ])
            await state.set_state(AddRecord.subcategory)
            await call.message.edit_text("üìÇ –í—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)
        else:
            await state.update_data(subcategory=None)
            await state.set_state(AddRecord.amount)
            await call.message.edit_text("üíµ –í–≤–µ–¥–∏ —Å—É–º–º—É:", reply_markup=back_btn("back_to_category"))

# ===== –í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ =====
@router.callback_query(AddRecord.subcategory)
async def choose_subcategory(call: CallbackQuery, state: FSMContext):
    if call.data == "skip_subcategory":
        await state.update_data(subcategory="–û–±—â–µ–µ")
    elif call.data.startswith("subcategory_"):
        sub_name = call.data.split("_", 1)[1]
        await state.update_data(subcategory=sub_name)
    else:
        await state.update_data(subcategory="–û–±—â–µ–µ")

    # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é/–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚Äî —Å—Ä–∞–∑—É –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    data = await state.get_data()
    if data.get("edit_field") in {"category", "subcategory"}:
        await state.update_data(edit_field=None)
        await show_confirm(call.message, state)
        return

    await state.set_state(AddRecord.amount)
    await call.message.edit_text("üíµ –í–≤–µ–¥–∏ —Å—É–º–º—É:", reply_markup=back_btn("back_to_subcategory"))

# ===== –í–≤–æ–¥ —Å—É–º–º—ã =====
@router.message(AddRecord.amount)
async def input_amount(message: Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    await state.update_data(amount=amount)

    data = await state.get_data()
    # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ —Ç–æ–ª—å–∫–æ —Å—É–º–º—É ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    if data.get("edit_field") == "amount":
        await state.update_data(edit_field=None)
        await show_confirm(message, state)
        return

    await state.set_state(AddRecord.date)
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '—Å–µ–≥–æ–¥–Ω—è'.\n–ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.",
        reply_markup=back_btn("back_to_amount")
    )

# ===== –í–≤–æ–¥ –¥–∞—Ç—ã =====
@router.message(AddRecord.date)
async def input_date(message: Message, state: FSMContext):
    text = message.text.strip().lower()
    if text in ("", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "—Å–µ–≥–æ–¥–Ω—è"):
        date = timezone.now().date()
    else:
        try:
            date = datetime.strptime(text, "%d.%m.%Y").date()
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return

    await state.update_data(date=date)

    data = await state.get_data()
    # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª–∏ —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    if data.get("edit_field") == "date":
        await state.update_data(edit_field=None)
        await show_confirm(message, state)
        return

    await show_confirm(message, state)

# ===== –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ =====
async def show_confirm(message_or_msg, state: FSMContext):
    data = await state.get_data()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_record")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_record")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
    ])
    await state.set_state(AddRecord.confirm)
    # message_or_msg –º–æ–∂–µ—Ç –±—ã—Ç—å Message (message) –∏–ª–∏ Message (call.message)
    await message_or_msg.answer(f"–ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ:\n\n{fmt_confirm_text(data)}", reply_markup=kb)

# ===== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ =====
@router.callback_query(AddRecord.confirm, F.data == "save_record")
async def save_record(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await save_transaction(call.from_user.id, data)
    await state.clear()
    await call.message.edit_text("‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", reply_markup=main_menu(True))
    await call.answer()

# ===== –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è =====
@router.callback_query(AddRecord.confirm, F.data == "edit_record")
async def edit_record(call: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–¢–∏–ø", callback_data="edit_type")],
        [InlineKeyboardButton(text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="edit_category")],
        [InlineKeyboardButton(text="–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="edit_subcategory")],
        [InlineKeyboardButton(text="–°—É–º–º–∞", callback_data="edit_amount")],
        [InlineKeyboardButton(text="–î–∞—Ç–∞", callback_data="edit_date")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="confirm_back")]
    ])
    await call.message.edit_text("–í—ã–±–µ—Ä–∏ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=kb)
    await call.answer()

# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π =====
@router.callback_query(F.data == "edit_type")
async def edit_type(call: CallbackQuery, state: FSMContext):
    await state.update_data(edit_field="type")
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∏ –†–∞—Å—Ö–æ–¥", callback_data="type_expense")],
        [InlineKeyboardButton(text="üí∞ –î–æ—Ö–æ–¥", callback_data="type_income")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="confirm_back")]
    ])
    await state.set_state(AddRecord.type)
    await call.message.edit_text("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –∑–∞–ø–∏—Å–∏:", reply_markup=kb)
    await call.answer()

@router.callback_query(F.data == "edit_category")
async def edit_category(call: CallbackQuery, state: FSMContext):
    await state.update_data(edit_field="category")
    cats = await get_categories()
    kb = categories_keyboard(cats, extra_buttons=[
        ("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip_category"),
        ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "confirm_back")
    ])
    await state.set_state(AddRecord.category)
    await call.message.edit_text("üìÇ –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)
    await call.answer()

@router.callback_query(F.data == "edit_subcategory")
async def edit_subcategory(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    category = data.get("category")
    if not category:
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        await state.update_data(edit_field="category")
        cats = await get_categories()
        kb = categories_keyboard(cats, extra_buttons=[
            ("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip_category"),
            ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "confirm_back")
        ])
        await state.set_state(AddRecord.category)
        await call.message.edit_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)
        await call.answer()
        return

    await state.update_data(edit_field="subcategory")
    subs = await get_subcategories(category)
    kb = subcategories_keyboard(subs, category, extra_buttons=[
        ("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip_subcategory"),
        ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "confirm_back")
    ])
    await state.set_state(AddRecord.subcategory)
    await call.message.edit_text("üìÇ –í—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)
    await call.answer()

@router.callback_query(F.data == "edit_amount")
async def edit_amount(call: CallbackQuery, state: FSMContext):
    await state.update_data(edit_field="amount")
    await state.set_state(AddRecord.amount)
    await call.message.edit_text("üíµ –í–≤–µ–¥–∏ –Ω–æ–≤—É—é —Å—É–º–º—É:", reply_markup=back_btn("confirm_back"))
    await call.answer()

@router.callback_query(F.data == "edit_date")
async def edit_date(call: CallbackQuery, state: FSMContext):
    await state.update_data(edit_field="date")
    await state.set_state(AddRecord.date)
    await call.message.edit_text("üìÖ –í–≤–µ–¥–∏ –Ω–æ–≤—É—é –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ '—Å–µ–≥–æ–¥–Ω—è':", reply_markup=back_btn("confirm_back"))
    await call.answer()

# ===== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î =====
@sync_to_async
def save_transaction(telegram_id, data):
    user = User.objects.get(telegram_id=telegram_id)
    Transaction.objects.create(
        user=user,
        type=data["type"],
        category=data.get("category", "–û–±—â–µ–µ"),
        subcategory=data.get("subcategory"),
        amount=data["amount"],
        date=data["date"]
    )

# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥" =====
@router.callback_query(F.data == "back_to_category")
async def back_to_category(call: CallbackQuery, state: FSMContext):
    cats = await get_categories()
    kb = categories_keyboard(cats, extra_buttons=[
        ("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip_category"),
        ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "add_record")
    ])
    await state.set_state(AddRecord.category)
    await call.message.edit_text("üìÇ –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)
    await call.answer()

@router.callback_query(F.data == "back_to_subcategory")
async def back_to_subcategory(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    cat = data.get("category", "–û–±—â–µ–µ")
    subs = await get_subcategories(cat)
    kb = subcategories_keyboard(subs, cat, extra_buttons=[
        ("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip_subcategory"),
        ("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_category")
    ])
    await state.set_state(AddRecord.subcategory)
    await call.message.edit_text("üìÇ –í—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)
    await call.answer()

@router.callback_query(F.data == "back_to_amount")
async def back_to_amount(call: CallbackQuery, state: FSMContext):
    await state.set_state(AddRecord.amount)
    await call.message.edit_text("üíµ –í–≤–µ–¥–∏ —Å—É–º–º—É:", reply_markup=back_btn("back_to_subcategory"))
    await call.answer()

@router.callback_query(F.data == "back_to_date")
async def back_to_date(call: CallbackQuery, state: FSMContext):
    await state.set_state(AddRecord.date)
    await call.message.edit_text("üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ '—Å–µ–≥–æ–¥–Ω—è'. –ú–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.", reply_markup=back_btn("back_to_amount"))
    await call.answer()

# ===== –í–æ–∑–≤—Ä–∞—Ç –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é =====
@router.callback_query(F.data == "confirm_back")
async def confirm_back(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save_record")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_record")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
    ])
    await state.set_state(AddRecord.confirm)
    await call.message.edit_text(f"–ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ:\n\n{fmt_confirm_text(data)}", reply_markup=kb)
    await call.answer()
