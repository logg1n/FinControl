from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from django.contrib.auth import get_user_model
from django.db import transaction
from asgiref.sync import sync_to_async
import uuid

User = get_user_model()
router = Router()

def _is_valid_uuid(code: str) -> bool:
    try:
        uuid.UUID(code)
        return True
    except Exception:
        return False

@sync_to_async
def link_user_by_code(code: str, telegram_id: int):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (status, username):
      - ("invalid", None)               ‚Äî –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
      - ("already_linked_same", name)   ‚Äî —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —ç—Ç–æ–º—É –∂–µ Telegram
      - ("already_linked_other", name)  ‚Äî —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É Telegram
      - ("linked", name)                ‚Äî —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–ª–∏
    """
    with transaction.atomic():
        user = User.objects.select_for_update().get(telegram_link_code=code)

        if user.telegram_id:
            if user.telegram_id == telegram_id:
                return "already_linked_same", user.username
            else:
                return "already_linked_other", user.username

        user.telegram_id = telegram_id
        user.telegram_link_code = ""  # –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π
        user.save(update_fields=["telegram_id", "telegram_link_code"])
        return "linked", user.username

@router.message(Command("link"))
async def cmd_link(message: Message):
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer(
            "‚ùó –£–∫–∞–∂–∏ –∫–æ–¥ –ø—Ä–∏–≤—è–∑–∫–∏: /link <–∫–æ–¥>\n\n"
            "‚ÑπÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ–¥ –≤ —Å–≤–æ—ë–º –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ."
        )
        return

    code = args[1].strip()

    # –ë—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ UUID (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –ø–æ–ª–µ–∑–Ω–æ)
    if not _is_valid_uuid(code):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –Ω–æ–≤—ã–π –∫–æ–¥ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.")
        return

    try:
        status, username = await link_user_by_code(code, message.from_user.id)

        if status == "already_linked_same":
            await message.answer("‚ÑπÔ∏è –≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ç–≤–æ–µ–º—É Telegram.")
        elif status == "already_linked_other":
            await message.answer(
                "‚ö†Ô∏è –≠—Ç–æ—Ç –∫–æ–¥ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∞–∫–∫–∞—É–Ω—Ç—É, —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–º—É –∫ –¥—Ä—É–≥–æ–º—É Telegram.\n"
                "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —Å–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É, –æ—Ç–≤—è–∂–∏ Telegram –Ω–∞ —Å–∞–π—Ç–µ –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –Ω–æ–≤—ã–π –∫–æ–¥."
            )
        elif status == "linked":
            await message.answer(
                "‚úÖ –ì–æ—Ç–æ–≤–æ! Telegram –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —Ç–≤–æ–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É.\n\n"
                "–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ:\n"
                "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö\n"
                "‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã\n"
                "‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞\n\n"
                "üí° –ü–æ–ø—Ä–æ–±—É–π /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ."
            )
    except User.DoesNotExist:
        await message.answer(
            "‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –Ω–æ–≤—ã–π –∫–æ–¥ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ."
        )
