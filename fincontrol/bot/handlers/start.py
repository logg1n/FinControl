# fincontrol/bot/handlers/stats.py
from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from django.utils import timezone
from datetime import timedelta
from transactions.models import Transaction
from django.db.models import Sum
from ..keyboards.report_kb import report_keyboard


router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ üí∞\n"
        "/today ‚Äî —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/week ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        "/category <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî —Ç—Ä–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏\n"
        "/report ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç"
    )

@router.message(Command("today"))
async def cmd_today(message: Message):
    user_id = message.from_user.id
    today = timezone.now().date()
    total = Transaction.objects.filter(
        user__telegram_id=user_id,
        date=today,
        type='expense'
    ).aggregate(sum=Sum('amount'))['sum'] or 0
    await message.answer(f"üí∏ –†–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {total:.2f}")

@router.message(Command("week"))
async def cmd_week(message: Message):
    user_id = message.from_user.id
    start = timezone.now().date() - timedelta(days=7)
    total = Transaction.objects.filter(
        user__telegram_id=user_id,
        date__gte=start,
        type='expense'
    ).aggregate(sum=Sum('amount'))['sum'] or 0
    await message.answer(f"üìä –†–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é: {total:.2f}")

@router.message(Command("category"))
async def cmd_category(message: Message):
    user_id = message.from_user.id
    args = message.text.split(maxsplit=1)
    if len(args) < 2:
        await message.answer("–£–∫–∞–∂–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: /category <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return
    cat = args[1]
    total = Transaction.objects.filter(
        user__telegram_id=user_id,
        category__iexact=cat,
        type='expense'
    ).aggregate(sum=Sum('amount'))['sum'] or 0
    await message.answer(f"üìÇ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{cat}': {total:.2f}")

@router.message(Command("report"))
async def cmd_report(message: Message):
    user_id = message.from_user.id
    today = timezone.now().date()
    expenses_today = Transaction.objects.filter(
        user__telegram_id=user_id,
        date=today,
        type='expense'
    ).aggregate(sum=Sum('amount'))['sum'] or 0

    expenses_week = Transaction.objects.filter(
        user__telegram_id=user_id,
        date__gte=today - timedelta(days=7),
        type='expense'
    ).aggregate(sum=Sum('amount'))['sum'] or 0

    await message.answer(
        f"üìÖ –°–µ–≥–æ–¥–Ω—è: {expenses_today:.2f}\n"
        f"üìÜ –ù–µ–¥–µ–ª—è: {expenses_week:.2f}",
        reply_markup=report_keyboard()
    )

@router.callback_query()
async def callbacks(call: CallbackQuery):
    if call.data == "details":
        await call.message.edit_text("üîç –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç...")
    elif call.data == "compare_week":
        await call.message.edit_text("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ–π...")
    elif call.data == "add_expense":
        await call.message.edit_text("‚ûï –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç—ã (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
    await call.answer()
