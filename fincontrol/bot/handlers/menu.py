from aiogram import F, Router
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message
from datetime import datetime

from bot.keyboards.main_kb import main_menu

router = Router()

# ===== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã =====
def menu_button() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ú–µ–Ω—é", callback_data="main_menu")]
    ])

# ===== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é =====
@router.callback_query(F.data == "main_menu")
async def cb_main_menu(call: CallbackQuery):
    await call.message.edit_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu(True))
    await call.answer()

# ===== –ü–æ–¥–º–µ–Ω—é ¬´–û—Ç—á—ë—Ç—ã¬ª =====
def reports_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –ó–∞ –¥–µ–Ω—å", callback_data="report_day")],
        [InlineKeyboardButton(text="üìÜ –ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="report_week")],
        [InlineKeyboardButton(text="üóì –ó–∞ –º–µ—Å—è—Ü", callback_data="report_month")],
        [InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="report_balance")],
        [InlineKeyboardButton(text="üìç –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="report_custom")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])

@router.callback_query(F.data == "reports_menu")
async def cb_reports_menu(call: CallbackQuery):
    await call.message.edit_text("üìä –í—ã–±–µ—Ä–∏ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:", reply_markup=reports_menu())
    await call.answer()

@router.callback_query(F.data == "report_day")
async def cb_report_day(call: CallbackQuery):
    total = await get_today_expenses(call.from_user.id)
    await call.message.edit_text(f"üìÖ –°–µ–≥–æ–¥–Ω—è: {total:.2f}", reply_markup=reports_menu())
    await call.answer()

@router.callback_query(F.data == "report_week")
async def cb_report_week(call: CallbackQuery):
    total = await get_week_expenses(call.from_user.id)
    await call.message.edit_text(f"üìÜ –ù–µ–¥–µ–ª—è: {total:.2f}", reply_markup=reports_menu())
    await call.answer()

@router.callback_query(F.data == "report_month")
async def cb_report_month(call: CallbackQuery):
    total = await get_month_expenses(call.from_user.id)
    await call.message.edit_text(f"üóì –ú–µ—Å—è—Ü: {total:.2f}", reply_markup=reports_menu())
    await call.answer()

@router.callback_query(F.data == "report_balance")
async def cb_report_balance(call: CallbackQuery):
    total = await get_balance(call.from_user.id)
    await call.message.edit_text(f"üí∞ –ë–∞–ª–∞–Ω—Å: {total:.2f}", reply_markup=reports_menu())
    await call.answer()

@router.callback_query(F.data == "report_custom")
async def cb_report_custom(call: CallbackQuery):
    first_date = await get_first_transaction_date(call.from_user.id)
    last_date = await get_last_transaction_date(call.from_user.id)
    if not first_date or not last_date:
        await call.message.edit_text("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞.", reply_markup=reports_menu())
        await call.answer()
        return
    await call.message.edit_text(
        f"üìç –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì‚Äì–î–î.–ú–ú.–ì–ì–ì–ì\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: {first_date.strftime('%d.%m.%Y')} ‚Äî {last_date.strftime('%d.%m.%Y')}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="reports_menu")]
        ])
    )
    await call.answer()

@router.message(F.text.regexp(r"^\d{2}\.\d{2}\.\d{4}\s*-\s*\d{2}\.\d{2}\.\d{4}$"))
async def custom_period_input(message: Message):
    try:
        start_str, end_str = message.text.replace(" ", "").split("-")
        start_date = datetime.strptime(start_str, "%d.%m.%Y").date()
        end_date = datetime.strptime(end_str, "%d.%m.%Y").date()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    first_date = await get_first_transaction_date(message.from_user.id)
    last_date = await get_last_transaction_date(message.from_user.id)

    if not first_date or not last_date:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞.", reply_markup=reports_menu())
        return

    if start_date < first_date:
        start_date = first_date
    if end_date > last_date:
        end_date = last_date
    if start_date > end_date:
        await message.answer("‚ö†Ô∏è –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–æ–∑–∂–µ –∫–æ–Ω–µ—á–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    total = await get_period_expenses(message.from_user.id, start_date, end_date)
    await message.answer(
        f"üìç –ó–∞ –ø–µ—Ä–∏–æ–¥ {start_date.strftime('%d.%m.%Y')} ‚Äî {end_date.strftime('%d.%m.%Y')}: {total:.2f}",
        reply_markup=reports_menu()
    )

# ===== –ü–æ–¥–º–µ–Ω—é ¬´–ö–∞—Ç–µ–≥–æ—Ä–∏–∏¬ª =====
def categories_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÇ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="category_menu")],
        [InlineKeyboardButton(text="üìÇ –ü–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="subcategory_menu")],
        [InlineKeyboardButton(text="üìã –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="all_categories_report")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])

@router.callback_query(F.data == "categories_menu")
async def cb_categories_menu(call: CallbackQuery):
    await call.message.edit_text("üìÇ –í—ã–±–µ—Ä–∏ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:", reply_markup=categories_menu_kb())
    await call.answer()

# ----- –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ -----
@router.callback_query(F.data == "category_menu")
async def cb_category_menu(call: CallbackQuery):
    cats = await get_categories()
    if cats:
        await call.message.edit_text("üìÇ –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories_keyboard(cats))
    else:
        await call.message.edit_text("‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.", reply_markup=categories_menu_kb())
    await call.answer()

@router.callback_query(F.data.startswith("category_"))
async def cb_category(call: CallbackQuery):
    cat_name = call.data.split("_", 1)[1]
    subs = await get_subcategories(cat_name)
    if subs:
        await call.message.edit_text("üìÇ –í—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=subcategories_keyboard(subs, cat_name))
    else:
        total = await get_category_expenses(call.from_user.id, cat_name)
        await call.message.edit_text(f"üìä –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{cat_name}': {total:.2f}", reply_markup=categories_menu_kb())
    await call.answer()

# ----- –ü–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ -----
def categories_keyboard_for_subcats(categories) -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text=name, callback_data=f"subcat_pick_{name}")]
        for _, name in categories
    ]
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="categories_menu")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.callback_query(F.data == "subcategory_menu")
async def cb_subcategory_menu(call: CallbackQuery):
    cats = await get_categories()
    if not cats:
        await call.message.edit_text("‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.", reply_markup=categories_menu_kb())
        await call.answer()
        return
    await call.message.edit_text("üìÇ –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=categories_keyboard_for_subcats(cats))
    await call.answer()

@router.callback_query(F.data.startswith("subcat_pick_"))
async def cb_subcat_pick(call: CallbackQuery):
    cat_name = call.data.split("_", 2)[2]
    subs = await get_subcategories(cat_name)
    if not subs:
        await call.message.edit_text(f"‚ö†Ô∏è –£ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{cat_name}' –Ω–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π.", reply_markup=categories_menu_kb())
    else:
        await call.message.edit_text("üìÇ –í—ã–±–µ—Ä–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=subcategories_keyboard(subs, cat_name))
    await call.answer()

@router.callback_query(F.data.startswith("subcategory_"))
async def cb_subcategory(call: CallbackQuery):
    sub_name = call.data.split("_", 1)[1]
    total = await get_subcategory_expenses(call.from_user.id, sub_name)
    await call.message.edit_text(f"üìä –†–∞—Å—Ö–æ–¥—ã –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{sub_name}': {total:.2f}", reply_markup=categories_menu_kb())
    await call.answer()

# ----- –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ -----
@router.callback_query(F.data == "all_categories_report")
async def cb_all_categories_report(call: CallbackQuery):
    report_text = await get_all_categories_report(call.from_user.id)
    await call.message.edit_text(report_text, reply_markup=categories_menu_kb())
    await call.answer()

# ===== –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å (–∑–∞–≥–ª—É—à–∫–∞) =====
@router.callback_query(F.data == "add_record")
async def cb_add_record(call: CallbackQuery):
    await call.message.edit_text("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", reply_markup=menu_button())
    await call.answer()
