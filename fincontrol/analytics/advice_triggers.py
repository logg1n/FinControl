import os
from datetime import datetime, timedelta
from django.utils import timezone
from django.db.models import Sum
from aiogram import Bot
from users.models import User
from transactions.models import Transaction
from services.advice_generator import get_ai_advice

bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã
_last_sent = {}

def _can_send(user_id, cooldown_hours=24):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–≤–µ—Ç (–Ω–µ —á–∞—â–µ cooldown_hours)."""
    now = timezone.now()
    last_time = _last_sent.get(user_id)
    if not last_time or (now - last_time) > timedelta(hours=cooldown_hours):
        _last_sent[user_id] = now
        return True
    return False

async def trigger_on_new_transaction(transaction):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–≤–µ—Ç–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —á–∞—Å—Ç–æ—Ç—ã)."""
    user = transaction.user
    if not user.telegram_id:
        return
    if not _can_send(user.id):
        return
    advice_text = get_ai_advice(user, days=30)
    await bot.send_message(user.telegram_id, f"üí° –°–æ–≤–µ—Ç –ø–æ –≤–∞—à–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ç—Ä–∞—Ç–∞–º:\n\n{advice_text}")

async def trigger_month_start():
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏—Ç–æ–≥–æ–≤ –∏ –ø–ª–∞–Ω–∞ –≤ –Ω–∞—á–∞–ª–µ –º–µ—Å—è—Ü–∞."""
    today = timezone.now().date()
    if today.day != 1:
        return
    for user in User.objects.exclude(telegram_id=None):
        advice_text = get_ai_advice(user, days=30)
        await bot.send_message(user.telegram_id, f"üìÖ –ò—Ç–æ–≥–∏ –º–µ—Å—è—Ü–∞ –∏ –ø–ª–∞–Ω:\n\n{advice_text}")

async def trigger_anomaly(transaction, threshold=1.5):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞—Ç–∞—Ö."""
    if transaction.type != "expense":
        return
    user = transaction.user
    if not user.telegram_id:
        return

    # –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    start_date = timezone.now().date() - timedelta(days=30)
    avg_expense = (
        Transaction.objects
        .filter(user=user, type="expense", date__gte=start_date)
        .aggregate(total=Sum("amount"))["total"] or 0
    )
    count = Transaction.objects.filter(user=user, type="expense", date__gte=start_date).count() or 1
    avg_per_tx = avg_expense / count

    if transaction.amount > avg_per_tx * threshold:
        advice_text = get_ai_advice(user, days=30)
        await bot.send_message(
            user.telegram_id,
            f"‚ö†Ô∏è –ê–Ω–æ–º–∞–ª—å–Ω–∞—è —Ç—Ä–∞—Ç–∞ {transaction.amount} {transaction.currency}!\n\n{advice_text}"
        )
