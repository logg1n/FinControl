import pandas as pd
import datetime
import os

import plotly.express as px
from openai import OpenAI  # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –æ–¥–Ω–∞, API –¥—Ä—É–≥–æ–π

from django.contrib.auth.decorators import login_required
from django.contrib.auth.forms import AuthenticationForm
from django.core.cache import cache
from django.db.models import Sum
from django.http import HttpResponse
from django.shortcuts import render, get_object_or_404, redirect
from django.template.loader import render_to_string

from .models import Transaction
from .forms import TransactionForm
from .filters import TransactionFilters
from .enums.service import get_enum_service
from .constants import CURRENCY_CHOICES




def get_ai_tip():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑ –∫—ç—à–∞ AI‚Äë—Å–æ–≤–µ—Ç –¥–Ω—è –æ—Ç DeepSeek."""
    today = datetime.date.today().isoformat()
    cache_key = f"ai_tip_{today}"

    # –ü—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ –∫—ç—à–∞
    tip = cache.get(cache_key)
    if tip:
        return tip

    # –ï—Å–ª–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ DeepSeek API
    client = OpenAI(
        api_key=os.getenv("DEEPSEEK_API_KEY"),  # –∫–ª—é—á –∏–∑ .env
        base_url="https://api.deepseek.com/v1"   # DeepSeek endpoint
    )

    prompt = (
        "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ–¥–∏–Ω –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π —Å–æ–≤–µ—Ç –ø–æ –ª–∏—á–Ω—ã–º —Ñ–∏–Ω–∞–Ω—Å–∞–º "
        "–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –°–æ–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω —à–∏—Ä–æ–∫–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏, "
        "–±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤, –º–∞–∫—Å–∏–º—É–º 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."
    )

    try:
        resp = client.chat.completions.create(
            model="deepseek-chat",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=60,
            temperature=0.8
        )
        tip = resp.choices[0].message["content"].strip()
    except Exception:
        # –§–æ–ª–±—ç–∫, –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
        tip = "üí° –í–µ–¥–∏—Ç–µ —É—á—ë—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ ‚Äî —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å —É—Ç–µ—á–∫–∏ –±—é–¥–∂–µ—Ç–∞."

    # –ö—ç—à–∏—Ä—É–µ–º —Å–æ–≤–µ—Ç –¥–æ –ø–æ–ª—É–Ω–æ—á–∏
    now = datetime.datetime.now()
    midnight = datetime.datetime.combine(
        now.date() + datetime.timedelta(days=1),
        datetime.time.min
    )
    seconds_until_midnight = int((midnight - now).total_seconds())
    cache.set(cache_key, tip, timeout=seconds_until_midnight)

    return tip

def root_router(request):
    """–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    if request.user.is_authenticated:
        return redirect("transactions")  # –∏–º—è URL –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    else:
        form = AuthenticationForm()
        tip_of_the_day = "üí° –í–µ–¥–∏—Ç–µ —É—á—ë—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ ‚Äî —ç—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å —É—Ç–µ—á–∫–∏ –±—é–¥–∂–µ—Ç–∞."
        return render(request, "transactions/home.html", {
            "form": form,
            "tip_of_the_day": tip_of_the_day
        })

def home(request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ä–º–æ–π –≤—Ö–æ–¥–∞ –∏ AI‚Äë—Å–æ–≤–µ—Ç–æ–º –¥–Ω—è."""
    form = AuthenticationForm()
    tip_of_the_day = get_ai_tip()
    return render(request, "transactions/home.html", {
        "form": form,
        "tip_of_the_day": tip_of_the_day
    })


@login_required
def transaction_list(request):
    """
    –°–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤.
    """
    qs = Transaction.objects.filter(user=request.user)
    filtered_qs = TransactionFilters(qs).apply(request.GET)
    return render(request, "transactions/list.html", {
        "transactions": filtered_qs
    })


@login_required
def transaction_add(request):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–¥–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ builder-enum (JSON).
    –í–∞–ª—é—Ç—ã ‚Äî –∏–∑ CURRENCY_CHOICES.
    """
    svc = get_enum_service()

    if request.method == "POST":
        form = TransactionForm(request.POST)
        if form.is_valid():
            transaction = form.save(commit=False)
            transaction.user = request.user
            # –ü—Ä–∏–≤–æ–¥–∏–º –≤–∞–ª—é—Ç—É –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
            if transaction.currency:
                transaction.currency = transaction.currency.upper()
            transaction.save()
            return redirect("transactions")
    else:
        form = TransactionForm()

    return render(request, "transactions/add.html", {
        "form": form,
        "categories": svc.list_categories(),
        "currencies": CURRENCY_CHOICES
    })


@login_required
def transaction_edit(request, pk):
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    """
    transaction = Transaction.objects.get(pk=pk, user=request.user)
    svc = get_enum_service()

    if request.method == "POST":
        form = TransactionForm(request.POST, instance=transaction)
        if form.is_valid():
            transaction = form.save(commit=False)
            transaction.user = request.user
            if transaction.currency:
                transaction.currency = transaction.currency.upper()
            transaction.save()
            return redirect("transactions")
    else:
        form = TransactionForm(instance=transaction)

    return render(request, "transactions/add.html", {
        "form": form,
        "categories": svc.list_categories(),
        "currencies": CURRENCY_CHOICES
    })


@login_required
def transaction_delete(request, pk):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    """
    transaction = Transaction.objects.get(pk=pk, user=request.user)
    if request.method == "POST":
        transaction.delete()
        return redirect("transactions")
    return render(request, "transactions/confirm_delete.html", {
        "transaction": transaction
    })

@login_required
def transactions_table_block(request):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-—Ñ—Ä–∞–≥–º–µ–Ω—Ç <tbody> —Ç–∞–±–ª–∏—Ü—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è AJAX-–ø–æ–¥–≥—Ä—É–∑–∫–∏.
    """
    qs = Transaction.objects.filter(user=request.user)
    qs = TransactionFilters(qs).apply(request.GET)

    html = render_to_string("transactions/_transactions_table_body.html", {
        "transactions": qs
    })
    return HttpResponse(html)



@login_required
def dashboard_view(request):
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    qs = Transaction.objects.filter(user=request.user)
    qs = TransactionFilters(qs).apply(request.GET)

    # KPI
    total_income = qs.filter(type='income').aggregate(sum=Sum('amount'))['sum'] or 0
    total_expense = qs.filter(type='expense').aggregate(sum=Sum('amount'))['sum'] or 0
    balance = total_income - total_expense

    # DataFrame –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    df = pd.DataFrame(qs.values())
    fig_line_html = fig_pie_html = fig_bar_html = None
    if not df.empty:
        df['date'] = pd.to_datetime(df['date'])

        # –õ–∏–Ω–∏—è
        daily = df.groupby(['date', 'type'])['amount'].sum().reset_index()
        fig_line_html = px.line(daily, x='date', y='amount', color='type',
                                title="–î–∏–Ω–∞–º–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤", markers=True).to_html(full_html=False)

        # –ö—Ä—É–≥–æ–≤–∞—è
        expenses = df[df['type'] == 'expense']
        if not expenses.empty:
            cat_sum = expenses.groupby('category')['amount'].sum().reset_index()
            fig_pie_html = px.pie(cat_sum, names='category', values='amount',
                                  title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", hole=0.4).to_html(full_html=False)

            # –¢–æ–ø‚Äë5 –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
            sub_sum = expenses.groupby('subcategory')['amount'].sum().reset_index()
            sub_sum = sub_sum.sort_values('amount', ascending=False).head(5)
            fig_bar_html = px.bar(sub_sum, x='amount', y='subcategory', orientation='h',
                                  title="–¢–æ–ø‚Äë5 –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º").to_html(full_html=False)

    return render(request, "transactions/dashboard.html", {
        "transactions": qs,
        "categories": get_enum_service().list_categories(),
        "currencies": CURRENCY_CHOICES,
        "total_income": total_income,
        "total_expense": total_expense,
        "balance": balance,
        "fig_line": fig_line_html,
        "fig_pie": fig_pie_html,
        "fig_bar": fig_bar_html
    })

