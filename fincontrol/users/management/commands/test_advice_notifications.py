# users/management/commands/test_advice_notifications.py
import os
import asyncio
import random
from decimal import Decimal
from datetime import timedelta
from django.core.management.base import BaseCommand, CommandError
from django.utils import timezone
from django.contrib.auth import get_user_model
from django.db import transaction as db_tx
from aiogram import Bot

from transactions.models import Transaction
from services.advice_generator import get_ai_advice
from services import advice_triggers as trg  # trigger_on_new_transaction, trigger_anomaly

class Command(BaseCommand):
    help = "–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–∞ (–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è, –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è, –Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞, –∞–Ω–æ–º–∞–ª–∏—è)."

    def add_arguments(self, parser):
        parser.add_argument("--username", required=True, help="–õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        parser.add_argument("--telegram-id", required=True, type=int, help="Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        parser.add_argument("--create-user", action="store_true", help="–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        parser.add_argument("--days", type=int, default=30, help="–ì–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞ (–¥–Ω–∏)")
        parser.add_argument("--seed", type=int, default=42, help="Seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏")
        parser.add_argument("--currency", default="RUB", help="–í–∞–ª—é—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")

    def handle(self, *args, **opts):
        random.seed(opts["seed"])

        bot_token = os.getenv("TELEGRAM_BOT_TOKEN")
        if not bot_token:
            raise CommandError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")

        if not os.getenv("OPENAI_API_KEY"):
            self.stderr.write(self.style.WARNING("OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω ‚Äî get_ai_advice –º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å."))

        username = opts["username"]
        telegram_id = opts["telegram_id"]
        days = opts["days"]
        currency = opts["currency"]

        User = get_user_model()
        user = User.objects.filter(username=username).first()
        if not user and not opts["create_user"]:
            raise CommandError(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å --create-user –¥–ª—è –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏—è.")

        if not user:
            user = User.objects.create_user(username=username, password="demo12345", email=f"{username}@example.com")
            for k, v in {"full_name": "–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "gender": "male", "age": 30, "position": "QA"}.items():
                if hasattr(user, k):
                    setattr(user, k, v)
            self.stdout.write(self.style.SUCCESS(f"–°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' —Å –ø–∞—Ä–æ–ª–µ–º demo12345"))

        # –ü—Ä–∏–≤—è–∂–µ–º Telegram
        if getattr(user, "telegram_id", None) != telegram_id:
            if hasattr(user, "telegram_id"):
                user.telegram_id = telegram_id
                user.save(update_fields=["telegram_id"])
                self.stdout.write(self.style.SUCCESS(f"–ü—Ä–∏–≤—è–∑–∞–Ω telegram_id={telegram_id}"))
            else:
                self.stdout.write(self.style.WARNING("–£ –º–æ–¥–µ–ª–∏ User –Ω–µ—Ç –ø–æ–ª—è telegram_id ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤—è—Ç—Å—è."))

        # 1) –ë–∞–∑–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π (–¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö –∏ –∞–Ω–æ–º–∞–ª–∏–π)
        today = timezone.now().date()
        start_date = today - timedelta(days=days)

        # –°–æ–∑–¥–∞—ë–º —É–º–µ—Ä–µ–Ω–Ω—É—é –±–∞–∑—É, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∞–ª–æ —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ –ø–µ—Ä–∏–æ–¥–µ
        existing = Transaction.objects.filter(user=user, type="expense", date__gte=start_date).count()
        to_create = max(0, 12 - existing)  # —Ü–µ–ª—å ‚Äî –∏–º–µ—Ç—å ~12 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ
        categories = ["–ï–¥–∞", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ö–æ–º–º—É–Ω–∞–ª–∫–∞", "–ó–¥–æ—Ä–æ–≤—å–µ", "–û–¥–µ–∂–¥–∞", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"]
        payment_methods = ["card", "cash", "bank"]

        if to_create:
            with db_tx.atomic():
                for _ in range(to_create):
                    amt = Decimal(random.randint(300, 2500))
                    Transaction.objects.create(
                        user=user,
                        amount=amt,
                        date=start_date + timedelta(days=random.randint(0, days)),
                        type="expense",
                        payment_method=random.choice(payment_methods),
                        currency=currency,
                        tag="baseline",
                        category=random.choice(categories),
                        subcategory=""
                    )
            self.stdout.write(self.style.SUCCESS(f"–°–æ–∑–¥–∞–Ω–æ –±–∞–∑–æ–≤—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤: {to_create}"))

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –±–æ—Ç–∞ –¥–ª—è –ø—Ä—è–º—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
        bot = Bot(token=bot_token)

        # 2) –¢–µ—Å—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: –æ—Ç–ø—Ä–∞–≤–∏–º —Å–æ–≤–µ—Ç –Ω–∞–ø—Ä—è–º—É—é
        try:
            advice_weekly = get_ai_advice(user, days=days)
            asyncio.run(bot.send_message(chat_id=telegram_id, text=f"üí° –¢–µ—Å—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n{advice_weekly}"))
            self.stdout.write(self.style.SUCCESS("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ ‚Äî OK"))
        except Exception as e:
            self.stderr.write(f"[weekly] –û—à–∏–±–∫–∞: {e}")

        # 3) –¢–µ—Å—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞ ¬´–ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏¬ª (–æ–±—Ö–æ–¥–∏—Ç cooldown, —Ç.–∫. –≤—ã–∑—ã–≤–∞–µ—Ç –Ω–∞–ø—Ä—è–º—É—é)
        try:
            new_tx = Transaction.objects.create(
                user=user,
                amount=Decimal("1500.00"),
                date=today,
                type="expense",
                payment_method="card",
                currency=currency,
                tag="–ø–æ—Å–ª–µ-–¥–æ–±–∞–≤–ª–µ–Ω–∏—è",
                category="–ï–¥–∞",
                subcategory=""
            )
            asyncio.run(trg.trigger_on_new_transaction(new_tx))
            self.stdout.write(self.style.SUCCESS("–¢—Ä–∏–≥–≥–µ—Ä –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ‚Äî OK"))
        except Exception as e:
            self.stderr.write(f"[on_new_tx] –û—à–∏–±–∫–∞: {e}")

        # 4) –¢–µ—Å—Ç ¬´–Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞¬ª: —ç–º—É–ª–∏—Ä—É–µ–º –≤—Ä—É—á–Ω—É—é (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ calendar day)
        try:
            advice_month = get_ai_advice(user, days=days)
            asyncio.run(bot.send_message(chat_id=telegram_id, text=f"üìÖ –¢–µ—Å—Ç –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞ ‚Äî –∏—Ç–æ–≥–∏ –∏ –ø–ª–∞–Ω:\n\n{advice_month}"))
            self.stdout.write(self.style.SUCCESS("–ù–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞ ‚Äî OK (—ç–º—É–ª—è—Ü–∏—è)"))
        except Exception as e:
            self.stderr.write(f"[month_start] –û—à–∏–±–∫–∞: {e}")

        # 5) –¢–µ—Å—Ç ¬´–∞–Ω–æ–º–∞–ª—å–Ω–∞—è —Ç—Ä–∞—Ç–∞¬ª: —Å—É–º–º–∞ —Å–∏–ª—å–Ω–æ –±–æ–ª—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
        try:
            huge_tx = Transaction.objects.create(
                user=user,
                amount=Decimal("50000.00"),
                date=today,
                type="expense",
                payment_method="card",
                currency=currency,
                tag="–∞–Ω–æ–º–∞–ª–∏—è",
                category="–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
                subcategory=""
            )
            asyncio.run(trg.trigger_anomaly(huge_tx, threshold=1.5))
            self.stdout.write(self.style.SUCCESS("–ê–Ω–æ–º–∞–ª—å–Ω–∞—è —Ç—Ä–∞—Ç–∞ ‚Äî OK"))
        except Exception as e:
            self.stderr.write(f"[anomaly] –û—à–∏–±–∫–∞: {e}")

        # –ó–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        try:
            bot.session.close()
        except Exception:
            pass

        self.stdout.write(self.style.SUCCESS("–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à—ë–Ω. –ü—Ä–æ–≤–µ—Ä—å Telegram."))
